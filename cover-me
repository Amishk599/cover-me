#!/bin/bash

# Cover Letter Generator CLI Wrapper
# This script allows running the cover letter generator from anywhere in the system

# Function to display error messages
error() {
    echo "Error: $1" >&2
    exit 1
}

# Function to find the script directory
find_script_dir() {
    local script_path="$0"
    
    # Handle symlinks
    while [ -L "$script_path" ]; do
        script_path="$(readlink "$script_path")"
    done
    
    # Get the directory containing the script
    dirname "$(realpath "$script_path")"
}

# Function to find the project root
find_project_root() {
    # If this script is installed in PATH, we need to find the actual project
    # First, try to find it relative to script location
    local script_dir="$(find_script_dir)"
    
    # If script is in the project directory
    if [ -f "$script_dir/src/main.py" ]; then
        echo "$script_dir"
        return 0
    fi
    
    # Common installation locations to check
    local common_paths=(
        "$HOME/cover-me"
        "$HOME/projects/cover-me" 
        "$HOME/workspace/cover-me"
        "$HOME/Workspace/personal/cover-me"
        "/opt/cover-me"
    )
    
    for path in "${common_paths[@]}"; do
        if [ -f "$path/src/main.py" ]; then
            echo "$path"
            return 0
        fi
    done
    
    # Try to find using which command if this script is symlinked
    if command -v cover-me >/dev/null 2>&1; then
        local cover_me_path="$(which cover-me)"
        local real_path="$(realpath "$cover_me_path")"
        local dir="$(dirname "$real_path")"
        
        if [ -f "$dir/src/main.py" ]; then
            echo "$dir"
            return 0
        fi
    fi
    
    return 1
}

# Main execution
main() {
    # Find the project directory
    PROJECT_DIR="$(find_project_root)"
    if [ $? -ne 0 ] || [ -z "$PROJECT_DIR" ]; then
        error "Could not find cover-me project directory. Please ensure the project is installed correctly."
    fi
    
    # Check if main.py exists
    if [ ! -f "$PROJECT_DIR/src/main.py" ]; then
        error "main.py not found in $PROJECT_DIR/src/. Please check your installation."
    fi
    
    # Change to project directory
    cd "$PROJECT_DIR" || error "Could not change to project directory: $PROJECT_DIR"
    
    # Check for virtual environment and activate if it exists
    if [ -d "$PROJECT_DIR/.venv" ]; then
        source "$PROJECT_DIR/.venv/bin/activate" || error "Could not activate virtual environment"
    elif [ -d "$PROJECT_DIR/venv" ]; then
        source "$PROJECT_DIR/venv/bin/activate" || error "Could not activate virtual environment"
    fi
    
    # Check if Python is available
    if ! command -v python3 >/dev/null 2>&1; then
        error "python3 is not installed or not in PATH"
    fi
    
    # Check for required environment variables
    if [ -z "$OPENAI_API_KEY" ] && [ -z "$ANTHROPIC_API_KEY" ]; then
        echo "Warning: Neither OPENAI_API_KEY nor ANTHROPIC_API_KEY environment variables are set." >&2
        echo "Please set one of these in your shell profile (~/.bashrc, ~/.zshrc, etc.)" >&2
        echo "Example: export OPENAI_API_KEY='your-api-key-here'" >&2
    fi
    
    # Run the Python module with all arguments passed through
    python3 -m src.main "$@"
}

# Run main function with all arguments
main "$@"